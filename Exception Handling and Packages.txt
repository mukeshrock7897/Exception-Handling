================================================================================================================================================

								Exception Handling
================================================================================================================================================


Exception
==========
==========


the errors detected during exection of program are called Exception

exception is runtime error

if any exception occurs at runtime the program will terminate upnormally,it means the program is not executing from strat to end of top to bottom



Exception Handling
==================

to avoid upnormal termination we need to handle the execution of program , this process known as Exception Handling

python provide try,and except keyword to handle exceptions



Synatx -


try:

  --------------
  --------------
  --------------

except Exception Class-Name:
	
	---------------------------
	---------------------------
	---------------------------

except Exception Class-Name:
	
	---------------------------
	---------------------------
	---------------------------

else:

    if there is no Exception then execute this block





In Above synatx if any exception occurs then it would be written inside the try block

Again try block will create an object to occured exception class and provide to except block

And if there is no exception then it will go to else block

In python every exception have a predefined class 


Ex--


no1=int(input("Enter the First Number::"))
no2=int(input("Enter The Second Number::"))
print("Add::",no1+no2)
print("Sub::",no1-no2)
print("Mul::",no1*no2)
try:
    print("Div::",no1/no2)
except ZeroDivisionError:
    print("You Can Not Divide By Zero")
print("Thanks")



		Output

Enter the First Number::10
Enter The Second Number::0
Add:: 10
Sub:: 10
Mul:: 0
You Can Not Divide By Zero
Thanks




Working with Multiple Except blocks
===================================

we can define the multiple except blocks 

means a single try block can have multiple except block to handle multiple exceptions


Synatx
-------

	try:
		---------------------
		---------------------
		---------------------

	except Exception Class1:
		
		---------------------
		---------------------
		---------------------

	except Exception Class2:
		
		---------------------
		---------------------
		---------------------

	except Exception Class3:
		
		---------------------
		---------------------
		---------------------
	



Ex-



no1=int(input("Enter the First Number::"))
no2=int(input("Enter The Second Number::"))
print("Add::",no1+no2)
print("Sub::",no1-no2)
print("Mul::",no1*no2)
try:
    
    print("Concactination::","Mukesh"+(no1+no2))
    
    print("Div::",no1/no2)

except ZeroDivisionError:
    print("You Can Not Divide By Zero")

except TypeError:
    print("You can not Concatinate String and Intger Both ")
    
print("Thanks")





Note-
 

A try block can also have optional else and optional finally keyword both


Ex-

no1=int(input("Enter the First Number::"))
no2=int(input("Enter The Second Number::"))
print("Add::",no1+no2)
print("Sub::",no1-no2)
print("Mul::",no1*no2)
try:   
    
    print("Div::",no1/no2)
    
except ZeroDivisionError:
    print("You Can Not Divide By Zero")

else:
    print("There is No Exception Found in Program")

finally:
    print("This is Finally keyword that will execute every time")
    
print("Thanks")



					Output


Enter the First Number::10
Enter The Second Number::20
Add:: 30
Sub:: -10
Mul:: 200
Div:: 0.5
There is No Exception Found in Program
This is Finally keyword that will execute every time
Thanks



Note - finally keyword always execute no matter exception occurs on not 

================================================================================================================================================


									Raise  Exceptions
================================================================================================================================================

You can raise exceptions in several ways by using 'raise' statement


Synatx-

		raise Exception-Class Name ("Your Message")

raise is used to throw an exception

if any function or program contains raise then that function need to be handle by try and excepty keywords


Ex--


def validate(age):
    if age>=20 and age<=50:
        print("Age is Valid")

    raise ValueError ("Error"):
        print("Age is Invalid")

    try:
        validate(age)

    except ValueError:
        print(ValueError)

    else:
        print("Thanks For Validating")
    finally:
        print("Happy Happy")
        
================================================================================================================================================

								Some Standard Error Class Names
================================================================================================================================================

AirthmeticError

ZeroDivisonError

AttributeError

ImportError

IndexError

KeyError

NameError

SyntaxError

ValueError

floatingPointError

AssertionError


================================================================================================================================================

								Module and Package
================================================================================================================================================

module are the python file

a file contain python code and saved with extension .py are called module

we use module to break large program into small managable and organised files


Synatx

import module_name


Ex--

def add(a,b):
	retrn a+b

def sub(a,b):
	return a-b


saved this file calc.py

for import this file in your program 


>>>import calc

>>>calc.add(10,20)		#30

>>>calc.sub(20,10)		#10




Using from import Statement
============================

by the import keyword we can import anything in program

module , it means function,class,list,tuple,set,dictionary,string etc

By the using from import we can import specific function or classes or strings module without importing whole module

Ex---

>>>import calc

>>>calc.add(10,20)	#30

>>>calc.sub(20,10)	#10


Note--In above example we imported each and everything


Syntax
============
 

from module_name  import specific_file/functions/classes/whatever


Ex--

>>>from calc import add,sub

>>>add(10,20)		#30

>>>sub(20,10)		#10


Note--In from importing we don't need any reference 


Using from keyword we can import whole modules also


Syntax-
============

from module_name import *


Ex-


>>>from calc import *

>>>add(10,20)		#30

>>>sub(20,10)		#10


================================================================================================================================================

									Package
================================================================================================================================================


package is collection of modules and subpackages


Ex--


		1------------A.py
		1
		1
		1------------B.py
		1
		1
		1------------C.py
		1
		1
		1
		1------------D.py
		1
		1
		1
		1-------------E.py
		

package means nothing just like folder who contains the python files


In Above diagram A,B,C,D,E are python files who stored in Demo folder



Syntax
=========

from package_name.module_name import function/class/string...




Ex--


>>>from Demo.A import function



Syntax for Sub-Packages
==========================

from package_name.sub_package_name.module_name  import function/class/string....



================================================================================================================================================

								Time and Date Module
================================================================================================================================================ 




time module availble in python who tells about time and date 

for use time and date you have to import time module


Bascially Time Have some term


4 digit year		2019

month			1 to 12

day(date)		1 to 31


Hour			0 to 23

Minute			0 to 59

Seconds			0 to 59

day of week		0 to 6 (0 is Monday)

day of year		1 to 366



Ex---

>>> import time
>>> print(time.localtime())

time.struct_time(tm_year=2019, tm_mon=1, tm_mday=8, tm_hour=17, tm_min=8, tm_sec=20, tm_wday=1, tm_yday=8, tm_isdst=0)



Getting current time
========================


>>> import time
>>> localtime=time.localtime(time.time())
>> print("Current Local Time::\n",localtime)

Current Local Time::
 time.struct_time(tm_year=2019, tm_mon=1, tm_mday=8, tm_hour=17, tm_min=9, tm_sec=43, tm_wday=1, tm_yday=8, tm_isdst=0)



Some built functions in Time Module
====================================


1--asctime()


convert time tuple structure into localtime


>>> import time
>>> t=time.localtime()
>>> print("Local Time::",time.asctime(t))

Local Time:: Tue Jan  8 17:13:01 2019



2--sleep()

hold the working process to given period

>>>import time 
>>>time.sleep(2)


3--gmtime()

convert local time


4--ctime()

convert local time



================================================================================================================================================
								Calendar Module
================================================================================================================================================

tell dates



>>> import calendar
>>> print(calendar.calendar(2019))
                                  2019

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                   1  2  3
 7  8  9 10 11 12 13       4  5  6  7  8  9 10       4  5  6  7  8  9 10
14 15 16 17 18 19 20      11 12 13 14 15 16 17      11 12 13 14 15 16 17
21 22 23 24 25 26 27      18 19 20 21 22 23 24      18 19 20 21 22 23 24
28 29 30 31               25 26 27 28               25 26 27 28 29 30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7             1  2  3  4  5                      1  2
 8  9 10 11 12 13 14       6  7  8  9 10 11 12       3  4  5  6  7  8  9
15 16 17 18 19 20 21      13 14 15 16 17 18 19      10 11 12 13 14 15 16
22 23 24 25 26 27 28      20 21 22 23 24 25 26      17 18 19 20 21 22 23
29 30                     27 28 29 30 31            24 25 26 27 28 29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7                1  2  3  4                         1
 8  9 10 11 12 13 14       5  6  7  8  9 10 11       2  3  4  5  6  7  8
15 16 17 18 19 20 21      12 13 14 15 16 17 18       9 10 11 12 13 14 15
22 23 24 25 26 27 28      19 20 21 22 23 24 25      16 17 18 19 20 21 22
29 30 31                  26 27 28 29 30 31         23 24 25 26 27 28 29
                                                    30

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                         1
 7  8  9 10 11 12 13       4  5  6  7  8  9 10       2  3  4  5  6  7  8
14 15 16 17 18 19 20      11 12 13 14 15 16 17       9 10 11 12 13 14 15
21 22 23 24 25 26 27      18 19 20 21 22 23 24      16 17 18 19 20 21 22
28 29 30 31               25 26 27 28 29 30         23 24 25 26 27 28 29
                                                    30 31






>>> import calendar
>>> print(calendar.prcal(2019))
                                  2019

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                   1  2  3
 7  8  9 10 11 12 13       4  5  6  7  8  9 10       4  5  6  7  8  9 10
14 15 16 17 18 19 20      11 12 13 14 15 16 17      11 12 13 14 15 16 17
21 22 23 24 25 26 27      18 19 20 21 22 23 24      18 19 20 21 22 23 24
28 29 30 31               25 26 27 28               25 26 27 28 29 30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7             1  2  3  4  5                      1  2
 8  9 10 11 12 13 14       6  7  8  9 10 11 12       3  4  5  6  7  8  9
15 16 17 18 19 20 21      13 14 15 16 17 18 19      10 11 12 13 14 15 16
22 23 24 25 26 27 28      20 21 22 23 24 25 26      17 18 19 20 21 22 23
29 30                     27 28 29 30 31            24 25 26 27 28 29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7                1  2  3  4                         1
 8  9 10 11 12 13 14       5  6  7  8  9 10 11       2  3  4  5  6  7  8
15 16 17 18 19 20 21      12 13 14 15 16 17 18       9 10 11 12 13 14 15
22 23 24 25 26 27 28      19 20 21 22 23 24 25      16 17 18 19 20 21 22
29 30 31                  26 27 28 29 30 31         23 24 25 26 27 28 29
                                                    30

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6                   1  2  3                         1
 7  8  9 10 11 12 13       4  5  6  7  8  9 10       2  3  4  5  6  7  8
14 15 16 17 18 19 20      11 12 13 14 15 16 17       9 10 11 12 13 14 15
21 22 23 24 25 26 27      18 19 20 21 22 23 24      16 17 18 19 20 21 22
28 29 30 31               25 26 27 28 29 30         23 24 25 26 27 28 29
                                                    30 31

None







>>> import calendar
>>> print(calendar.month(2019,2))
   February 2019
Mo Tu We Th Fr Sa Su
             1  2  3
 4  5  6  7  8  9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28





>>> import calendar
>>> print(calendar.prmonth(2019,2))
   February 2019
Mo Tu We Th Fr Sa Su
             1  2  3
 4  5  6  7  8  9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28
None




>>> import calendar
>>> print(calendar.leapdays(2000,2019))
5



>>> import calendar
>>> print(calendar.isleap(2019))
False



>>> import calendar
>>> print(calendar.monthcalendar(2019,2))
[[0, 0, 0, 0, 1, 2, 3], [4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 0, 0, 0]]























